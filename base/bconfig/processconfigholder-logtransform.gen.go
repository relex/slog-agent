// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package bconfig

import (
	"fmt"

	"github.com/relex/gotils/logger"
	"gopkg.in/yaml.v3"
)

// LogTransformConfigHolder holds an interface to the actual Config
// The medium is used to support YAML unmarshalling of interfaces
type LogTransformConfigHolder struct {
	Location string `yaml:"-"`
	LogTransformConfig
}

// LogTransformConfigConstructors holds a table of LogTransformConfig constructors by type name
var LogTransformConfigConstructors map[string]func() LogTransformConfig

// RegisterLogTransformConfigConstructors registers the list of process config structs
// It can only be called once
func RegisterLogTransformConfigConstructors(newMap map[string]func() LogTransformConfig) {
	if LogTransformConfigConstructors != nil {
		logger.Panic("already registered LogTransformConfigConstructors")
	}
	LogTransformConfigConstructors = newMap
}

func (holder LogTransformConfigHolder) String() string {
	return fmt.Sprint(holder.LogTransformConfig)
}

// MarshalYAML provides custom marshalling to export readable document. The result is not reversible.
func (holder LogTransformConfigHolder) MarshalYAML() (interface{}, error) {
	return holder.LogTransformConfig, nil
}

// UnmarshalYAML provides custom unmarshalling for the implementations of Config
func (holder *LogTransformConfigHolder) UnmarshalYAML(value *yaml.Node) error {
	if LogTransformConfigConstructors == nil {
		logger.Panic("LogTransformConfigConstructors not initialized")
	}
	return unmarshalYAMLObjectHolder(value,
		func(typ string) interface{} {
			createFunc, found := LogTransformConfigConstructors[typ]
			if found {
				c := createFunc()
				holder.LogTransformConfig = c
				return c
			}
			return nil
		},
		&holder.Location,
	)
}
