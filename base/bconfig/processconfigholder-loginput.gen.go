// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package bconfig

import (
	"fmt"

	"gopkg.in/yaml.v3"
)

// LogInputConfigHolder holds an interface to the actual Config
// The medium is used to support YAML unmarshalling of interfaces
type LogInputConfigHolder struct {
	Location string `yaml:"-"`
	LogInputConfig
}

// LogInputConfigConstructors holds a table of LogInputConfig constructors by type name
var LogInputConfigConstructors map[string]func() LogInputConfig

// RegisterLogInputConfigConstructors registers the list of process config structs
// It can only be called once
func RegisterLogInputConfigConstructors(newMap map[string]func() LogInputConfig) {
	if LogInputConfigConstructors != nil {
		panic("already registered LogInputConfigConstructors")
	}
	LogInputConfigConstructors = newMap
}

func (holder LogInputConfigHolder) String() string {
	return fmt.Sprint(holder.LogInputConfig)
}

// MarshalYAML provides custom marshalling to export readable document. The result is not reversible.
func (holder LogInputConfigHolder) MarshalYAML() (interface{}, error) {
	return holder.LogInputConfig, nil
}

// UnmarshalYAML provides custom unmarshalling for the implementations of Config
func (holder *LogInputConfigHolder) UnmarshalYAML(value *yaml.Node) error {
	if LogInputConfigConstructors == nil {
		panic("LogInputConfigConstructors not initialized")
	}
	return unmarshalYAMLObjectHolder(value,
		func(typ string) interface{} {
			createFunc, found := LogInputConfigConstructors[typ]
			if found {
				c := createFunc()
				holder.LogInputConfig = c
				return c
			}
			return nil
		},
		&holder.Location,
	)
}
